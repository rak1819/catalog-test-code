import org.json.JSONObject;
import java.util.Map;
import java.util.TreeMap;

pulbic class ShamirSecretSharing {

    public static void main(String[] args) {
        String jsonInput = """
        {
            "keys": {
                "n": 4,
                "k": 3
            },
            "1": {
                "base": "10",
                "value": "4"
            },
            "2": {
                "base": "2",
                "value": "111"
            },
            "3": {
                "base": "10",
                "value": "12"
            },
            "6": {
                "base": "4",
                "value": "213"
            }
        }
        """;

        JSONObject jsonObject = new JSONObject(jsonInput);
        JSONObject keys = jsonObject.getJSONObject("keys");
        int n = keys.getInt("n");
        int k = keys.getInt("k");

        Map<Integer, Integer> points = new TreeMap<>();


        for (String key : jsonObject.keySet()) {
            if (!key.equals("keys")) {
                int x = Integer.parseInt(key); // x is the key of each point (e.g., 1, 2, 3, 6)
                JSONObject rootData = jsonObject.getJSONObject(key); 
                String encodedY = rootData.getString("value");
                int base = Integer.parseInt(rootData.getString("base"));

                // Decode the y value from the given base
                int y = Integer.parseInt(encodedY, base);
                points.put(x, y); // Store the (x, y) pair
            }
        }

        double constantTerm = lagrangeInterpolation(points);
        System.out.println("Constant term (c): " + constantTerm);
    }

    public static double lagrangeInterpolation(Map<Integer, Integer> points) {
        double result = 0.0;

        for (Map.Entry<Integer, Integer> entry1 : points.entrySet()) {
            int xi = entry1.getKey();
            int yi = entry1.getValue();

            double term = yi;


            for (Map.Entry<Integer, Integer> entry2 : points.entrySet()) {
                int xj = entry2.getKey();
                if (xj != xi) {
                    term *= (0.0 - xj) / (xi - xj);
                }
            }

            result += term;
        }

        return result;
    }
}


ouput : constant term (c): 3.0
